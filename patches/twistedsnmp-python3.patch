diff -ruN a/agentprotocol.py b/agentprotocol.py
--- a/agentprotocol.py	2022-09-16 16:03:19.000000000 +0300
+++ b/agentprotocol.py	2022-09-17 15:09:23.563178324 +0300
@@ -64,9 +64,9 @@
 			try:
 				request.decode(datagram)
 				processed = 1
-			except asnerror.ValueConstraintError, err:
+			except asnerror.ValueConstraintError as err:
 				pass
-			except pysnmp_error.PySnmpError, why:
+			except pysnmp_error.PySnmpError as why:
 				log.error( 'Malformed inbound message dropped: %s', why )
 				continue
 			else:
diff -ruN a/agent.py b/agent.py
--- a/agent.py	2022-09-16 16:03:19.000000000 +0300
+++ b/agent.py	2022-09-17 15:09:14.755178289 +0300
@@ -53,7 +53,7 @@
 		pdu = response.apiGenGetPdu()
 		try:
 			result = self.getOIDs( [key for (key,_) in variables] )
-		except errors.OIDNameError, err:
+		except errors.OIDNameError as err:
 			pdu.apiGenSetErrorStatus( err.errorCode )
 			pdu.apiGenSetErrorIndex( err.errorIndex + 1 ) # 1-indexed
 			pdu.apiGenSetVarBind(variables)
@@ -76,7 +76,7 @@
 		for i,key in enumerate(oids):
 			try:
 				result.append( self.dataStore.getExactOID( key ) )
-			except errors.OIDNameError, err:
+			except errors.OIDNameError as err:
 				# do error reporting here
 				err.errorIndex = i
 				raise
@@ -146,7 +146,7 @@
 		pdu = response.apiGenGetPdu()
 		try:
 			result = self.getNextOIDs( [key for (key,_) in variables] )
-		except errors.OIDNameError, err:
+		except errors.OIDNameError as err:
 			pdu.apiGenSetErrorStatus( err.errorCode )
 			pdu.apiGenSetErrorIndex( err.errorIndex + 1 ) # 1-indexed
 			pdu.apiGenSetVarBind(variables)
@@ -169,7 +169,7 @@
 		for index, base in enumerate(oids):
 			try:
 				result.append( self.dataStore.nextOID( base ))
-			except errors.OIDNameError, err:
+			except errors.OIDNameError as err:
 				errorIndex = index
 				raise
 		return result
@@ -222,7 +222,7 @@
 				[ oid for (oid,_) in variables[nonRepeaters:] ],
 				maxRepetitions,
 			)
-		except errors.OIDNameError, err:
+		except errors.OIDNameError as err:
 			# should never happen, but who knows...
 			pdu.apiGenSetErrorStatus( err.errorCode )
 			pdu.apiGenSetErrorIndex( err.errorIndex + 1 ) # 1-indexed
@@ -258,7 +258,7 @@
 		for index, base in enumerate(nonRepeating):
 			try:
 				oid,value = self.dataStore.nextOID( base )
-			except errors.OIDNameError, err:
+			except errors.OIDNameError as err:
 				oid = oid
 				value = v2c.EndOfMibView()
 			result.append( (oid,value) )
@@ -271,7 +271,7 @@
 				try:
 					oid,value = self.dataStore.nextOID( base )
 					foundGood = 1
-				except errors.OIDNameError, err:
+				except errors.OIDNameError as err:
 					# XXX is the use of base here correct?
 					oid = base
 					value = v2c.EndOfMibView()
@@ -356,11 +356,11 @@
 					if specificType is None:
 						for key,value in specifics.items():
 							if value:
-								yield gType, key, value 
-					elif specifics.has_key( specificType ):
+								yield gType, key, value
+					elif specificType in specifics:
 						if specifics[ specificType ]:
 							yield gType, specificType, specifics[ specificType ]
-					elif specifics.has_key( None ):
+					elif None in specifics:
 						if specifics[ None ]:
 							yield gType, None, specifics[None]
 	
@@ -376,21 +376,21 @@
 		for (generic,specific,values) in self.findTrapHandlers(
 			genericType, specificType
 		):
-			if values.has_key( managerIP ):
+			if managerIP in values:
 				try:
 					del values[ managerIP ]
 					count += 1
-				except KeyError, err:
+				except KeyError as err:
 					pass 
 				try:
 					if not self._trapRegistry[generic][specific]:
 						del self._trapRegistry[generic][specific]
-				except KeyError, err:
+				except KeyError as err:
 					pass
 				try:
 					if not self._trapRegistry[generic]:
 						del self._trapRegistry[generic]
-				except KeyError, err:
+				except KeyError as err:
 					pass
 		return count
 	def sendTrap(
diff -ruN a/bisectoidstore.py b/bisectoidstore.py
--- a/bisectoidstore.py	2022-09-16 16:03:19.000000000 +0300
+++ b/bisectoidstore.py	2022-09-17 15:09:32.143178358 +0300
@@ -69,7 +69,7 @@
 			if oid != base:
 				try:
 					oid,result = self.OIDs[start-1]
-				except IndexError, err:
+				except IndexError as err:
 					pass
 				else:
 					if (
@@ -119,7 +119,7 @@
 				while hasattr( value, 'firstOID' ):
 					try:
 						return value.firstOID()
-					except errors.OIDNameError, err:
+					except errors.OIDNameError as err:
 						index += 1
 						try:
 							oid,value = self.OIDs[index]
@@ -167,7 +167,7 @@
 				if hasattr( value, 'nextOID' ):
 					try:
 						return value.nextOID( sortableToOID(base) )
-					except errors.OIDNameError, err:
+					except errors.OIDNameError as err:
 						start += 1
 			else:
 				# otherwise return the item *after* the found OID (exact match)
@@ -180,7 +180,7 @@
 				if hasattr( value, 'firstOID' ):
 					try:
 						return value.firstOID()
-					except errors.OIDNameError, err:
+					except errors.OIDNameError as err:
 						pass
 				else:
 					return sortableToOID(key),self.returnValue(value,key)
diff -ruN a/bsdoidstore.py b/bsdoidstore.py
--- a/bsdoidstore.py	2022-09-16 16:03:19.000000000 +0300
+++ b/bsdoidstore.py	2022-09-17 15:09:40.091178390 +0300
@@ -92,7 +92,7 @@
 		inclusive operation).
 		"""
 		encoded = oidToSortable( base )
-		if self.btree.has_key( encoded ):
+		if encoded in self.btree:
 			return base, self.btree[ encoded ]
 		raise errors.OIDNameError( base, message="No such OID" )
 	def setValue( self, oid, value):
@@ -103,7 +103,7 @@
 		"""
 		old = None
 		oid = oidToSortable( oid )
-		if self.btree.has_key( oid ):
+		if oid in self.btree:
 			try:
 				old = self.btree[ oid ]
 			except KeyError:
@@ -134,7 +134,7 @@
 			encoded = oidToSortable( base )
 			oid, value = self.btree.set_location(encoded)
 			oid = sortableToOID( oid )
-		except KeyError, err:
+		except KeyError as err:
 			raise errors.OIDNameError(
 				base,
 				message="OID not found in database"
@@ -143,7 +143,7 @@
 			try:
 				oid,value = self.btree.next()
 				oid = sortableToOID( oid )
-			except KeyError, err:
+			except KeyError as err:
 				raise errors.OIDNameError(
 					base,
 					message="OID appears to be last in database"
diff -ruN a/doc/examples/simpleget.py b/doc/examples/simpleget.py
--- a/doc/examples/simpleget.py	2022-09-16 16:03:19.000000000 +0300
+++ b/doc/examples/simpleget.py	2022-09-17 15:02:29.219176679 +0300
@@ -15,12 +15,12 @@
 	return df
 
 def printResults( result ):
-	print 'Results:'
+	print('Results:')
 	pprint.pprint( result )
 	return result
 
 def errorReporter( err ):
-	print 'ERROR', err.getTraceback()
+	print('ERROR', err.getTraceback())
 	return err
 def exiter( value ):
 	reactor.stop()
@@ -40,7 +40,7 @@
 baseoid -- dotted set of OIDs to retrieve from agent
 """
 	if len(sys.argv) < 4:
-		print usage
+		print(usage)
 		sys.exit( 1 )
 	ipAddress = sys.argv[1]
 	# choose random port in range 25000 to 30000
diff -ruN a/doc/examples/simplegettable.py b/doc/examples/simplegettable.py
--- a/doc/examples/simplegettable.py	2022-09-16 16:03:19.000000000 +0300
+++ b/doc/examples/simplegettable.py	2022-09-17 15:02:44.495176740 +0300
@@ -15,12 +15,12 @@
 	return df
 
 def printResults( result ):
-	print 'Results:'
+	print('Results:')
 	pprint.pprint( result )
-	return result
+	return(result)
 
 def errorReporter( err ):
-	print 'ERROR', err.getTraceback()
+	print('ERROR', err.getTraceback())
 	return err
 def exiter( value ):
 	reactor.stop()
@@ -40,7 +40,7 @@
 baseoid -- dotted set of OIDs to retrieve from agent
 """
 	if len(sys.argv) < 4:
-		print usage
+		print(usage)
 		sys.exit( 1 )
 	ipAddress = sys.argv[1]
 	# choose random port in range 25000 to 30000
diff -ruN a/doc/examples/simpleserver.py b/doc/examples/simpleserver.py
--- a/doc/examples/simpleserver.py	2022-09-16 16:03:19.000000000 +0300
+++ b/doc/examples/simpleserver.py	2022-09-17 15:14:57.963179652 +0300
@@ -47,7 +47,7 @@
 
 def main(oids=testingOIDs):
 	agent, port = createAgent( oids )
-	print 'Listening on port', port
+	print('Listening on port', port)
 
 if __name__ == "__main__":
 	reactor.callWhenRunning( main )
diff -ruN a/doc/examples/simpleset.py b/doc/examples/simpleset.py
--- a/doc/examples/simpleset.py	2022-09-16 16:03:19.000000000 +0300
+++ b/doc/examples/simpleset.py	2022-09-17 15:02:58.371176795 +0300
@@ -21,12 +21,12 @@
 	return df
 
 def printResults( result ):
-	print 'Results:'
+	print('Results:')
 	pprint.pprint( result )
 	return result
 
 def errorReporter( err ):
-	print 'ERROR', err.getTraceback()
+	print('ERROR', err.getTraceback())
 	return err
 def exiter( value ):
 	reactor.stop()
@@ -46,7 +46,7 @@
 baseoid -- dotted set of OIDs to retrieve from agent
 """
 	if len(sys.argv) < 4:
-		print usage
+		print(usage)
 		sys.exit( 1 )
 	ipAddress = sys.argv[1]
 	# choose random port in range 25000 to 30000
diff -ruN a/doc/pydoc/pydoc2.py b/doc/pydoc/pydoc2.py
--- a/doc/pydoc/pydoc2.py	2022-09-16 16:03:19.000000000 +0300
+++ b/doc/pydoc/pydoc2.py	2022-09-17 15:03:11.811176848 +0300
@@ -52,7 +52,7 @@
 				module = sys.modules.get(modname)
 				if modname != name and module and hasattr(module, key):
 					if getattr(module, key) is base:
-						if not cdict.has_key(key):
+						if not key in cdict:
 							cdict[key] = cdict[base] = modname + '.html#' + key
 		
 		funcs, fdict = [], {}
@@ -244,7 +244,7 @@
 		for exclusion in exclusions:
 			try:
 				self.exclusions[ exclusion ]= pydoc.locate ( exclusion)
-			except pydoc.ErrorDuringImport, value:
+			except pydoc.ErrorDuringImport as value:
 				self.warn( """Unable to import the module %s which was specified as an exclusion module"""% (repr(exclusion)))
 		self.formatter = formatter or DefaultFormatter()
 		for base in baseModules:
@@ -254,18 +254,18 @@
 		self.warnings.append (message)
 	def info (self, message):
 		"""Information/status report"""
-		print message
+		print(message)
 	def addBase(self, specifier):
 		"""Set the base of the documentation set, only children of these modules will be documented"""
 		try:
 			self.baseSpecifiers [specifier] = pydoc.locate ( specifier)
 			self.pending.append (specifier)
-		except pydoc.ErrorDuringImport, value:
+		except pydoc.ErrorDuringImport as value:
 			self.warn( """Unable to import the module %s which was specified as a base module"""% (repr(specifier)))
 	def addInteresting( self, specifier):
 		"""Add a module to the list of interesting modules"""
 		if self.checkScope( specifier):
-##			print "addInteresting", specifier
+##			print("addInteresting", specifier)
 			self.pending.append (specifier)
 		else:
 			self.completed[ specifier] = 1
@@ -297,7 +297,7 @@
 		try:
 			while self.pending:
 				try:
-					if self.completed.has_key( self.pending[0] ):
+					if self.pending[0] in self.completed:
 						raise AlreadyDone( self.pending[0] )
 					self.info( """Start %s"""% (repr(self.pending[0])))
 					object = pydoc.locate ( self.pending[0] )
@@ -310,7 +310,7 @@
 				except (SystemError, SystemExit), value:
 					self.info( """   ... FAILED %s"""% (repr( value)))
 					self.warn( """Unable to import the module %s"""% (repr(self.pending[0])))
-				except Exception, value:
+				except Exception as value:
 					self.info( """   ... FAILED %s"""% (repr( value)))
 					self.warn( """Unable to import the module %s"""% (repr(self.pending[0])))
 				else:
@@ -335,7 +335,7 @@
 				del self.pending[0]
 		finally:
 			for item in self.warnings:
-				print item
+				print(item)
 			
 	def clean (self, objectList, object):
 		"""callback from the formatter object asking us to remove
diff -ruN a/logs.py b/logs.py
--- a/logs.py	2022-09-16 16:03:19.000000000 +0300
+++ b/logs.py	2022-09-17 15:09:49.671178428 +0300
@@ -43,5 +43,5 @@
 agentprotocol_log.setLevel( logging.DEBUG )
 try:
 	logging.basicConfig()
-except Exception, err:
+except Exception as err:
 	pass
diff -ruN a/massretriever.py b/massretriever.py
--- a/massretriever.py	2022-09-16 16:03:19.000000000 +0300
+++ b/massretriever.py	2022-09-17 15:10:03.663178483 +0300
@@ -193,7 +193,7 @@
 			self.result[key] = set = {}
 		for oidObject in oids:
 			oidObject = oid.OID( oidObject )
-			if not set.has_key( oidObject ):
+			if not oidObject in set:
 				set[oidObject] = None
 		return None
 	def printStats( self ):
diff -ruN a/oidstore.py b/oidstore.py
--- a/oidstore.py	2022-09-16 16:03:19.000000000 +0300
+++ b/oidstore.py	2022-09-17 15:10:11.879178516 +0300
@@ -87,7 +87,7 @@
 			while oid:
 				oid,value = self.nextOID( oid )
 				yield oid, value
-		except errors.OIDNameError, err:
+		except errors.OIDNameError as err:
 			pass
 
 def dumbPrefix( key, oid ):
diff -ruN a/pysnmpproto.py b/pysnmpproto.py
--- a/pysnmpproto.py	2022-09-16 16:03:19.000000000 +0300
+++ b/pysnmpproto.py	2022-09-17 15:10:19.307178545 +0300
@@ -24,16 +24,16 @@
 		USE_STRING_OIDS = False
 		# This seems to slow down rather than speed up the OID class...
 		#psyco.bind(oid.OID)
-	except ImportError, err:
+	except ImportError as err:
 		from twistedsnmp import oidstub as oid
 		USE_STRING_OIDS = True
 	try:
 		from pysnmp.asn1.encoding.ber import univ
 		cacheOIDEncoding = univ.ObjectIdentifierMixIn.berInternEncoding
 		CAN_CACHE_OIDS = True
-	except (ImportError,AttributeError), err:
+	except (ImportError,AttributeError) as err:
 		CAN_CACHE_OIDS = False
-except ImportError, err:
+except ImportError as err:
 	pysnmpversion = 4
 	USE_STRING_OIDS = False
 	CAN_CACHE_OIDS = False
@@ -41,7 +41,7 @@
 try:
 	raise ImportError
 	import psyco
-except ImportError, err:
+except ImportError as err:
 	pass
 else:
 	from pysnmp.asn1 import base
diff -ruN a/setup.py b/setup.py
--- a/setup.py	2022-09-16 16:03:19.000000000 +0300
+++ b/setup.py	2022-09-17 15:10:27.655178579 +0300
@@ -10,11 +10,11 @@
 	import sys,os, string
 	from distutils.sysconfig import *
 	from distutils.core import setup
-	
+	from distutils.command.install_data import install_data
 	# don't want to use import because there might be an installed version 
 	# and current path is often not in import directories, whereas we *know*
 	# the file is right next to setup.py in the source archive.
-	execfile( 'version.py', globals())
+	exec(compile(open("version.py").read(), "version.py", 'exec'))
 
 	##############
 	## Following is from Pete Shinners,
@@ -22,7 +22,7 @@
 	## some unix machines where the data files are copied
 	## to weird locations if the user's configuration options
 	## were entered during the wrong phase of the moon :) .
-	from distutils.command.install_data import install_data
+
 	class smart_install_data(install_data):
 		def run(self):
 			#need to change self.install_dir to the library dir
diff -ruN a/snmpprotocol.py b/snmpprotocol.py
--- a/snmpprotocol.py	2022-09-16 16:03:19.000000000 +0300
+++ b/snmpprotocol.py	2022-09-17 15:10:36.635178614 +0300
@@ -54,7 +54,7 @@
 			return
 		try:
 			key = self.getRequestKey( response, address )
-		except KeyError, err:
+		except KeyError as err:
 			key = None
 		if key in self.requests:
 			df,timer = self.requests[key]
@@ -84,9 +84,9 @@
 		traps = getattr( self, '_trapRegistry', None )
 		if not traps:
 			return False
-		if traps.has_key( address ):
+		if address in traps:
 			generics = traps[address]
-		elif traps.has_key( None ):
+		elif None in traps:
 			generics = traps[ None ]
 		else:
 			return False
@@ -115,7 +115,7 @@
 									callback( request, address )
 									found = True
 			return found
-		except Exception, err:
+		except Exception as err:
 			log.warn(
 				"""Failure processing trap %s from %s: %s""",
 				address,
@@ -137,9 +137,9 @@
 		]:
 			try:
 				ID = request['pdu'][key]['request_id']
-			except KeyError, err:
+			except KeyError as err:
 				pass
-			except TypeError, err:
+			except TypeError as err:
 				log.error(
 					"""Unexpected TypeError retrieving request key %r: %s""",
 					key, log.getException(err),
@@ -155,13 +155,13 @@
 				response = implementation.GetResponse()
 				response.decode( message )
 				return response
-			except Exception, err:
+			except Exception as err:
 				pass
 		try:
 			metaReq = alpha.MetaMessage()
 			metaReq.decode( message )
 			return metaReq.apiAlphaGetCurrentComponent()
-		except Exception, err:
+		except Exception as err:
 			pass
 		return None
 
@@ -214,13 +214,13 @@
 		"205.207.149.252", 161, protocol = port.protocol,
 	)
 	def onSuccess( value ):
-		print 'Success:'
+		print('Success:')
 		if isinstance( value, dict ):
 			value = value.items()
 		for key,item in value:
-			print key, len(item)
+			print(key, len(item))
 	def onFailure( reason ):
-		print 'Failure:', reason
+		print('Failure:', reason)
 	d = proxy.get( ['.1.3.6.1.2.1.1.1.0', '.1.3.6.1.2.1.1.5.0', '.1.3.6.1.2.1.1.6.0'] )
 	d.addCallbacks( onSuccess, onFailure )
 
diff -ruN a/tableretriever.py b/tableretriever.py
--- a/tableretriever.py	2022-09-16 16:03:19.000000000 +0300
+++ b/tableretriever.py	2022-09-17 15:10:43.803178643 +0300
@@ -85,7 +85,7 @@
 						if current is None:
 							self.values[ root ] = current = {}
 						# avoids duplicate callbacks!
-						if not current.has_key( key ):
+						if key not in current:
 							current[ key ] = value
 							if self.recordCallback is not None and callable(self.recordCallback):
 								self.recordCallback( root, key, value )
@@ -125,7 +125,7 @@
 						if current is None:
 							values[ rootOID ] = current = {}
 						# avoids duplicate callbacks!
-						if not current.has_key( key ):
+						if key not in current:
 							current[ key ] = value
 							if callback is not None:
 								callback( rootOID, key, value )
@@ -189,7 +189,7 @@
 
 		try:
 			self.proxy.send(request.encode())
-		except socket.error, err:
+		except socket.error as err:
 			if retryCount <= 0:
 				failObject = failure.Failure()
 				if getattr(self,'df',None) and not self.df.called:
@@ -245,7 +245,7 @@
 						del self.df
 				except defer.AlreadyCalledError:
 					pass
-			except Exception, err:
+			except Exception as err:
 				if getattr(self,'df',None) and not self.df.called:
 					self.df.errback( err )
 					del self.df
@@ -314,7 +314,7 @@
 						for l in newOIDs, repeatingRoots:
 							del l[idx]
 						break # XXX check logic here, can't more than one end at the same time?
-				except IndexError, err:
+				except IndexError as err:
 					raise error.ProtoError( """Incorrectly formed table response: %s : %s"""%(newOIDs,err))
 
 		# Decide whether to request next item...
diff -ruN a/test/simpleagent.py b/test/simpleagent.py
--- a/test/simpleagent.py	2022-09-16 16:03:19.000000000 +0300
+++ b/test/simpleagent.py	2022-09-17 15:08:08.995178028 +0300
@@ -20,7 +20,7 @@
 					),
 				),
 			)
-			print 'listening on port', port
+			print('listening on port', port)
 			return port
 		except twisted_error.CannotListenError:
 			pass
diff -ruN a/test/test_get.py b/test/test_get.py
--- a/test/test_get.py	2022-09-16 16:03:19.000000000 +0300
+++ b/test/test_get.py	2022-09-17 15:08:19.099178068 +0300
@@ -39,7 +39,7 @@
 
 		assert self.success, self.response
 		assert isinstance( self.response, dict ), self.response
-		assert self.response.has_key( oid.OID('.1.3.6.1.2.1.1.1.0') ), self.response
+		assert oid.OID('.1.3.6.1.2.1.1.1.0') in self.response, self.response
 		assert self.response[oid.OID('.1.3.6.1.2.1.1.1.0') ] == 'Hello world!', self.response
 
 	#good
@@ -52,12 +52,10 @@
 
 		assert self.success, self.response
 		assert isinstance( self.response, dict ), self.response
-		assert self.response.has_key(
-			oid.OID('.1.3.6.1.2.1.1')
-		), (self.response,self)
+		assert oid.OID('.1.3.6.1.2.1.1') in self.response, (self.response,self)
 		tableData = self.response[oid.OID('.1.3.6.1.2.1.1') ]
 		assert isinstance(tableData, dict)
-		assert tableData.has_key(oid.OID('.1.3.6.1.2.1.1.1.0')), tableData
+		assert oid.OID('.1.3.6.1.2.1.1.1.0') in tableData, tableData
 	def test_tableGetWithStart( self ):
 		"""Can retrieve a tabular value?"""
 		d = self.client.getTable( 
@@ -72,15 +70,13 @@
 
 		assert self.success, self.response
 		assert isinstance( self.response, dict ), self.response
-		assert self.response.has_key(
-			oid.OID('.1.3.6.1.2.1.1')
-		), (self.response,self)
+		assert oid.OID('.1.3.6.1.2.1.1') in self.response, (self.response,self)
 		tableData = self.response[oid.OID('.1.3.6.1.2.1.1') ]
 		assert isinstance(tableData, dict)
 		# won't have this key because started later...
-		assert not tableData.has_key(oid.OID('.1.3.6.1.2.1.1.1.0')), tableData
+		assert not oid.OID('.1.3.6.1.2.1.1.1.0') in tableData, tableData
 		# should (only) have this key because started at 3...
-		assert tableData.has_key(oid.OID('.1.3.6.1.2.1.1.4.0')), tableData
+		assert oid.OID('.1.3.6.1.2.1.1.4.0') in tableData, tableData
 		assert len(tableData) == 1
 
 	#good
@@ -117,7 +113,7 @@
 			raise self.response.value
 		else:
 			for oidObject in oids:
-				assert self.response.has_key( oid.OID(oidObject) )
+				assert oid.OID(oidObject) in self.response
 	#good
 	def test_multiTableGetBad( self ):
 		oids = [
@@ -129,8 +125,8 @@
 		d = self.client.getTable( oids )
 		self.doUntilFinish( d )
 		for oidObject in oids[:-1]:
-			assert self.response.has_key( oid.OID(oidObject) )
-		assert not self.response.has_key( oid.OID(oids[-1]) ), self.response
+			assert oid.OID(oidObject) in self.response
+		assert not oid.OID(oids[-1]) in self.response, self.response
 	#good
 	def test_tableGetErrorReported( self ):
 		oids = [
diff -ruN a/test/test.py b/test/test.py
--- a/test/test.py	2022-09-16 16:03:19.000000000 +0300
+++ b/test/test.py	2022-09-17 15:15:28.267179772 +0300
@@ -45,7 +45,7 @@
 			import gc
 			while 1:
 				unittest.TextTestRunner(verbosity=2).run( suite )
-				#print 'collection', gc.collect()
+				#print('collection', gc.collect())
 				
 		else:
 			unittest.TextTestRunner(verbosity=2).run( suite )
diff -ruN a/test/test_trap.py b/test/test_trap.py
--- a/test/test_trap.py	2022-09-16 16:03:19.000000000 +0300
+++ b/test/test_trap.py	2022-09-17 15:08:28.255178105 +0300
@@ -36,7 +36,7 @@
 			genericType=6, specificType=8,
 			callback = self.storeTrap,
 		)
-		print self.client.protocol._trapRegistry
+		print(self.client.protocol._trapRegistry)
 		theAgent = self.agent.protocol.agent
 		handler = agent.TrapHandler(
 			managerIP = ('127.0.0.1',self.client.protocol.transport.port),
@@ -81,14 +81,14 @@
 def printTrap( req ):
 	pdu = req.apiAlphaGetPdu()
 	if req.apiAlphaGetProtoVersionId() == alpha.protoVersionId1:
-		print 'Enterprise: %s\n' % pdu.apiAlphaGetEnterprise() + \
+		print('Enterprise: %s\n' % pdu.apiAlphaGetEnterprise() + \
 			  'Agent Address: %s\n' % pdu.apiAlphaGetAgentAddr() + \
 			  'Generic Trap: %s\n' % pdu.apiAlphaGetGenericTrap() + \
 			  'Specific Trap: %s\n' % pdu.apiAlphaGetSpecificTrap() + \
 			  'Uptime: %s\n' % pdu.apiAlphaGetTimeStamp() + \
-			  'Var-binds:'
+			  'Var-binds:')
 	for varBind in pdu.apiAlphaGetVarBindList():
-		print varBind.apiAlphaGetOidVal()
+		print(varBind.apiAlphaGetOidVal())
 
 
 class TrapTestsV2c( TrapTestsV1 ):
diff -ruN a/twinetables.py b/twinetables.py
--- a/twinetables.py	2022-09-16 16:03:19.000000000 +0300
+++ b/twinetables.py	2022-09-17 15:13:39.727179341 +0300
@@ -63,6 +63,6 @@
 		for oid,table in tables:
 			try:
 				record[ oid ] = table.pop( oid+suffix )
-			except KeyError, err:
+			except KeyError as err:
 				pass 
 		yield suffix, record 
diff -ruN a/utilities/mirroragent.py b/utilities/mirroragent.py
--- a/utilities/mirroragent.py	2022-09-16 16:03:19.000000000 +0300
+++ b/utilities/mirroragent.py	2022-09-17 15:08:40.311178152 +0300
@@ -6,18 +6,18 @@
 	"""Do a getTable on proxy for OIDs and store in oidStore"""
 	oidStore = openStore( oidStore )
 	def rowCallback( root, key,value, oidStore = oidStore):
-		print key, '-->', repr(value)
+		print(key, '-->', repr(value))
 		oidStore.setValue( key, value )
 	df = proxy.getTable(
 		OIDs, retryCount=10,
 		recordCallback=rowCallback
 	)
 	def errorReporter( err ):
-		print 'ERROR', err
+		print('ERROR', err)
 		raise
 	def exiter( value, oidStore=oidStore ):
 		reactor.stop()
-		print 'closing'
+		print('closing')
 		oidStore.close()
 		return value
 	df.addCallback( exiter )
@@ -51,7 +51,7 @@
 """
 	import sys
 	if len(sys.argv) < 4:
-		print usage
+		print(usage)
 		sys.exit( 1 )
 	ipAddress = sys.argv[1]
 	port = reactor.listenUDP(
diff -ruN a/utilities/synchronous.py b/utilities/synchronous.py
--- a/utilities/synchronous.py	2022-09-16 16:03:19.000000000 +0300
+++ b/utilities/synchronous.py	2022-09-17 15:08:50.147178191 +0300
@@ -71,11 +71,11 @@
 if __name__ == "__main__":
 	import sys
 	if not sys.argv[1:]:
-		print """For testing run:
+		print("""For testing run:
 	synchronous server
 or
 	synchronous client
-from the command line."""
+from the command line.""")
 		sys.exit( 1 )
 		
 	if sys.argv[1] == 'server':
@@ -105,7 +105,7 @@
 				),
 			),
 		)
-		print 'Starting listening agent'
+		print('Starting listening agent')
 		reactor.run()
 	else:
 		from twistedsnmp import agentproxy, snmpprotocol
@@ -117,5 +117,5 @@
 			port = 20161,
 		)
 		proxy.verbose = 1
-		print synchronous( 0, proxy.getTable, ('.1.3.6.1.2.1.1',) )
-		
\ В конце файла нет новой строки
+		print(synchronous( 0, proxy.getTable, ('.1.3.6.1.2.1.1',) ))
+		
diff -ruN a/v3/agentproxy.py b/v3/agentproxy.py
--- a/v3/agentproxy.py	2022-09-16 16:03:19.000000000 +0300
+++ b/v3/agentproxy.py	2022-09-17 15:09:02.519178241 +0300
@@ -80,12 +80,12 @@
 			request = self.encode(oids, self.community)
 			key = self.getRequestKey( request )
 			self.send(request.encode())
-		except socket.error, err:
+		except socket.error as err:
 			return defer.fail(failure.Failure())
 		def asDictionary( value ):
 			try:
 				return dict(value)
-			except Exception, err:
+			except Exception as err:
 				log.error( """Failure converting query results %r to dictionary: %s""", value, err )
 				return {}
 		df = defer.Deferred()
@@ -115,7 +115,7 @@
 			return response
 		try:
 			self.send(request.encode())
-		except socket.error, err:
+		except socket.error as err:
 			return defer.fail(failure.Failure())
 		df = defer.Deferred()
 		df.addCallback( raiseOnError )
@@ -348,7 +348,7 @@
 					key = self.getRequestKey( request )
 					try:
 						self.send(request.encode())
-					except socket.error, err:
+					except socket.error as err:
 						df.errback( failure.Failure() )
 						return
 					else:
@@ -360,6 +360,6 @@
 						return
 				log.debug( """timeout raising error: %r""", self )
 				df.errback(defer.TimeoutError('SNMP request timed out'))
-		except Exception, err:
+		except Exception as err:
 			df.errback( failure.Failure() )
 		
