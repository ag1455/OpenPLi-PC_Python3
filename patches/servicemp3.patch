diff -ruN a/servicemp3/servicemp3.cpp b/servicemp3/servicemp3.cpp
--- a/servicemp3/servicemp3.cpp	2024-12-03 11:25:07.000000000 +0300
+++ b/servicemp3/servicemp3.cpp	2024-12-03 11:34:01.257560878 +0300
@@ -125,6 +125,9 @@
 		extensions.push_back("wv");
 		extensions.push_back("pva");
 		extensions.push_back("wtv");
+		extensions.push_back("ts");
+		extensions.push_back("mts");
+		extensions.push_back("m2ts");
 		sc->addServiceFactory(eServiceFactoryMP3::id, this, extensions);
 	}
 
@@ -524,7 +527,7 @@
 		m_sourceinfo.containertype = ctMPEGPS;
 		m_sourceinfo.is_video = TRUE;
 	}
-	else if (strcasecmp(ext, ".ts") == 0)
+	else if (strcasecmp(ext, ".ts") == 0 || strcasecmp(ext, ".mts") == 0  || strcasecmp(ext, ".m2ts") == 0)
 	{
 		m_sourceinfo.containertype = ctMPEGTS;
 		m_sourceinfo.is_video = TRUE;
@@ -617,10 +620,10 @@
 			if ( m_ref.getData(7) & PROGRESSIVE_DOWNLOAD )
 			{
 				/* progressive download buffering */
-				if (::access("/hdd/movie", X_OK) >= 0)
+				if (::access("/media/hdd/movie", X_OK) >= 0)
 				{
 					/* It looks like /hdd points to a valid mount, so we can store a download buffer on it */
-					m_download_buffer_path = "/hdd/gstreamer_XXXXXXXXXX";
+					m_download_buffer_path = "/media/hdd/gstreamer_XXXXXXXXXX";
 				}
 			}
 		}
@@ -727,6 +730,16 @@
 	g_free(uri);
 	if (suburi != NULL)
 		g_free(suburi);
+
+	cXineLib *xineLib = cXineLib::getInstance();
+	int length;
+	length = strlen(filename);
+	char myfilesrt[2000];
+	sprintf(myfilesrt, "%s", filename);
+	myfilesrt[length-4] = '\0';
+	char myfile[2000];
+	sprintf(myfile, "%s#subtitle:%s.srt", filename, myfilesrt);
+	xineLib->FilmVideo(myfile);
 }
 
 eServiceMP3::~eServiceMP3()
@@ -865,29 +878,6 @@
 {
 	ASSERT(m_state == stIdle);
 
-	if (m_gst_playbin)
-	{
-		eDebug("[eServiceMP3] starting pipeline");
-		GstStateChangeReturn ret;
-		ret = gst_element_set_state (m_gst_playbin, GST_STATE_PLAYING);
-
-		switch(ret)
-		{
-		case GST_STATE_CHANGE_FAILURE:
-			eDebug("[eServiceMP3] failed to start pipeline");
-			stop();
-			break;
-		case GST_STATE_CHANGE_SUCCESS:
-			m_is_live = false;
-			break;
-		case GST_STATE_CHANGE_NO_PREROLL:
-			m_is_live = true;
-			break;
-		default:
-			break;
-		}
-	}
-
 	if (m_ref.path.find("://") == std::string::npos)
 	{
 		/* read event from .eit file */
@@ -907,6 +897,8 @@
 		}
 	}
 
+	m_state = stRunning;
+	m_event(this, evStart);
 	return 0;
 }
 
@@ -934,6 +926,9 @@
 	saveCuesheet();
 	m_nownext_timer->stop();
 
+	cXineLib *xineLib = cXineLib::getInstance();
+	xineLib->stopVideo();
+
 	return 0;
 }
 
@@ -966,6 +961,8 @@
 	eDebug("[eServiceMP3] pause");
 	trickSeek(0.0);
 
+	cXineLib *xineLib = cXineLib::getInstance();
+	xineLib->VideoPause();
 	return 0;
 }
 
@@ -974,16 +971,11 @@
 	if (!m_gst_playbin || m_state != stRunning)
 		return -1;
 
-	/* no need to unpase if we are not paused already */
-	if (m_currentTrickRatio == 1.0 && !m_paused)
-	{
-		eDebug("[eServiceMP3] trickSeek no need to unpause!");
-		return 0;
-	}
-
 	eDebug("[eServiceMP3] unpause");
 	trickSeek(1.0);
 
+	cXineLib *xineLib = cXineLib::getInstance();
+	xineLib->VideoResume();
 	return 0;
 }
 
@@ -999,172 +991,41 @@
 	if (!m_gst_playbin || m_state != stRunning)
 		return -1;
 
-	GstFormat fmt = GST_FORMAT_TIME;
-	gint64 len;
-	if (!gst_element_query_duration(m_gst_playbin, fmt, &len))
-		return -1;
-		/* len is in nanoseconds. we have 90 000 pts per second. */
-
-	pts = len / 11111LL;
+	cXineLib *xineLib = cXineLib::getInstance();
+	xineLib->VideoPosition();
+	pts = xineLib->Vlength*90;
 	return 0;
 }
 
 RESULT eServiceMP3::seekToImpl(pts_t to)
 {
-		/* convert pts to nanoseconds */
-	m_last_seek_pos = to * 11111LL;
-	if (!gst_element_seek (m_gst_playbin, m_currentTrickRatio, GST_FORMAT_TIME, (GstSeekFlags)(GST_SEEK_FLAG_FLUSH | GST_SEEK_FLAG_KEY_UNIT),
-		GST_SEEK_TYPE_SET, m_last_seek_pos,
-		GST_SEEK_TYPE_NONE, GST_CLOCK_TIME_NONE))
-	{
-		eDebug("[eServiceMP3] seekTo failed");
-		return -1;
-	}
-
-	if (m_paused)
-	{
-		m_event((iPlayableService*)this, evUpdatedInfo);
-	}
-
 	return 0;
 }
 
 RESULT eServiceMP3::seekTo(pts_t to)
 {
-	RESULT ret = -1;
-
-	if (m_gst_playbin)
-	{
-		m_prev_decoder_time = -1;
-		m_decoder_time_valid_state = 0;
-		ret = seekToImpl(to);
-	}
-
+	cXineLib *xineLib = cXineLib::getInstance();
+	xineLib->SeekTo(to/90);
+	RESULT ret = 0;
 	return ret;
 }
 
 
 RESULT eServiceMP3::trickSeek(gdouble ratio)
 {
-	if (!m_gst_playbin)
-		return -1;
-	GstState state, pending;
-	if (ratio > -0.01 && ratio < 0.01)
-	{
-		gst_element_set_state(m_gst_playbin, GST_STATE_PAUSED);
-		/* pipeline sometimes block due to audio track issue off gstreamer.
-		If the pipeline is blocked up on pending state change to paused ,
-        this issue is solved be just reslecting the current audio track.*/
-		gst_element_get_state(m_gst_playbin, &state, &pending, 1 * GST_SECOND);
-		if (state == GST_STATE_PLAYING && pending == GST_STATE_PAUSED)
-		{
-			if (m_currentAudioStream >= 0)
-				selectTrack(m_currentAudioStream);
-			else
-				selectTrack(0);
-		}
-		return 0;
-	}
-
-	bool unpause = (m_currentTrickRatio == 1.0 && ratio == 1.0);
-	if (unpause)
-	{
-		GstElement *source = NULL;
-		GstElementFactory *factory = NULL;
-		const gchar *name = NULL;
-		g_object_get (G_OBJECT (m_gst_playbin), "source", &source, NULL);
-		if (!source)
-		{
-			eDebugNoNewLineStart("[eServiceMP3] trickSeek - cannot get source");
-			goto seek_unpause;
-		}
-		factory = gst_element_get_factory(source);
-		g_object_unref(source);
-		if (!factory)
-		{
-			eDebugNoNewLineStart("[eServiceMP3] trickSeek - cannot get source factory");
-			goto seek_unpause;
-		}
-		name = gst_plugin_feature_get_name(GST_PLUGIN_FEATURE(factory));
-		if (!name)
-		{
-			eDebugNoNewLineStart("[eServiceMP3] trickSeek - cannot get source name");
-			goto seek_unpause;
-		}
-		/*
-		 * We know that filesrc and souphttpsrc will not timeout after long pause
-		 * If there are other sources which will not timeout, add them here
-		*/
-		if (!strcmp(name, "filesrc") || !strcmp(name, "souphttpsrc"))
-		{
-			GstStateChangeReturn ret;
-			/* make sure that last state change was successfull */
-			ret = gst_element_get_state(m_gst_playbin, &state, &pending, 0);
-			if (ret == GST_STATE_CHANGE_SUCCESS)
-			{
-				gst_element_set_state(m_gst_playbin, GST_STATE_PLAYING);
-				ret = gst_element_get_state(m_gst_playbin, &state, &pending, 0);
-				if (ret == GST_STATE_CHANGE_SUCCESS)
-					return 0;
-			}
-			eDebugNoNewLineStart("[eServiceMP3] trickSeek - invalid state, state:%s pending:%s ret:%s",
-				gst_element_state_get_name(state),
-				gst_element_state_get_name(pending),
-				gst_element_state_change_return_get_name(ret));
-		}
-		else
-		{
-			eDebugNoNewLineStart("[eServiceMP3] trickSeek - source '%s' is not supported", name);
-		}
-seek_unpause:
-		eDebugNoNewLine(", doing seeking unpause\n");
-	}
-
-	m_currentTrickRatio = ratio;
-
-	bool validposition = false;
-	gint64 pos = 0;
-	pts_t pts;
-	if (getPlayPosition(pts) >= 0)
-	{
-		validposition = true;
-		pos = pts * 11111LL;
-	}
-
-	gst_element_get_state(m_gst_playbin, &state, &pending, 1 * GST_SECOND);
-	if (state != GST_STATE_PLAYING)
-		gst_element_set_state(m_gst_playbin, GST_STATE_PLAYING);
-
-	if (validposition)
-	{
-		if (ratio >= 0.0)
-		{
-			gst_element_seek(m_gst_playbin, ratio, GST_FORMAT_TIME, (GstSeekFlags)(GST_SEEK_FLAG_FLUSH | GST_SEEK_FLAG_SKIP), GST_SEEK_TYPE_SET, pos, GST_SEEK_TYPE_SET, -1);
-		}
-		else
-		{
-			/* note that most elements will not support negative speed */
-			gst_element_seek(m_gst_playbin, ratio, GST_FORMAT_TIME, (GstSeekFlags)(GST_SEEK_FLAG_FLUSH | GST_SEEK_FLAG_SKIP), GST_SEEK_TYPE_SET, 0, GST_SEEK_TYPE_SET, pos);
-		}
-	}
-
-	m_prev_decoder_time = -1;
-	m_decoder_time_valid_state = 0;
+	printf("----Ratio=%d\n",ratio);
+	cXineLib *xineLib = cXineLib::getInstance();
+	xineLib->VideoPlayF();
 	return 0;
 }
 
 
 RESULT eServiceMP3::seekRelative(int direction, pts_t to)
 {
-	if (!m_gst_playbin)
-		return -1;
-
-	pts_t ppos;
-	if (getPlayPosition(ppos) < 0) return -1;
-	ppos += to * direction;
-	if (ppos < 0)
-		ppos = 0;
-	return seekTo(ppos);
+	eDebug("eDVBServicePlay::seekRelative: jump %d, %lld", direction, to);
+	cXineLib *xineLib = cXineLib::getInstance();
+	xineLib->VideoRewT(to/90*direction);
+	return 0;
 }
 
 gint eServiceMP3::match_sinktype(const GValue *velement, const gchar *type)
@@ -1175,29 +1036,12 @@
 
 RESULT eServiceMP3::getPlayPosition(pts_t &pts)
 {
-	gint64 pos;
-	pts = 0;
-
 	if (!m_gst_playbin || m_state != stRunning)
 		return -1;
 
-	if ((audioSink || videoSink) && !m_paused && !m_sourceinfo.is_hls)
-	{
-		g_signal_emit_by_name(videoSink ? videoSink : audioSink, "get-decoder-time", &pos);
-		if (!GST_CLOCK_TIME_IS_VALID(pos)) return -1;
-	}
-	else
-	{
-		GstFormat fmt = GST_FORMAT_TIME;
-		if (!gst_element_query_position(m_gst_playbin, fmt, &pos))
-		{
-			eDebug("[eServiceMP3] gst_element_query_position failed in getPlayPosition");
-			return -1;
-		}
-	}
-
-	/* pos is in nanoseconds. we have 90 000 pts per second. */
-	pts = pos / 11111LL;
+	cXineLib *xineLib = cXineLib::getInstance();
+	xineLib->VideoPosition();
+	pts = xineLib->Vpos*90;
 	return 0;
 }
 
@@ -1252,13 +1096,20 @@
 int eServiceMP3::getInfo(int w)
 {
 	const gchar *tag = 0;
+	cXineLib *xineLib = cXineLib::getInstance();
 
 	switch (w)
 	{
 	case sServiceref: return m_ref;
-	case sVideoHeight: return m_height;
-	case sVideoWidth: return m_width;
-	case sFrameRate: return m_framerate;
+	case sVideoHeight:
+		return xineLib->getVideoHeight();
+		break;
+	case sVideoWidth:
+		return xineLib->getVideoWidth();
+		break;
+	case sFrameRate:
+		return xineLib->getVideoFrameRate();
+		break;
 	case sProgressive: return m_progressive;
 	case sGamma: return m_gamma;
 	case sAspect: return m_aspect;
@@ -1605,14 +1456,18 @@
 
 int eServiceMP3::getNumberOfTracks()
 {
- 	return m_audioStreams.size();
+	cXineLib *xineLib = cXineLib::getInstance();
+	int ret = xineLib->getNumberOfTracksAudio();
+	if (ret)
+		return ret;
+	return 0;
 }
 
 int eServiceMP3::getCurrentTrack()
 {
-	if (m_currentAudioStream == -1)
-		g_object_get (G_OBJECT (m_gst_playbin), "current-audio", &m_currentAudioStream, NULL);
-	return m_currentAudioStream;
+	cXineLib *xineLib = cXineLib::getInstance();
+	int ret = xineLib->getCurrentTrackAudio();
+		return ret;
 }
 
 RESULT eServiceMP3::selectTrack(unsigned int i)
@@ -1652,6 +1507,9 @@
 		return 0;
 	}
 	return -1;
+	cXineLib *xineLib = cXineLib::getInstance();
+	xineLib->selectAudioStream(i);
+	return i;
 }
 
 int eServiceMP3::getCurrentChannel()
@@ -1667,16 +1525,12 @@
 
 RESULT eServiceMP3::getTrackInfo(struct iAudioTrackInfo &info, unsigned int i)
 {
-	if (i >= m_audioStreams.size())
-	{
-		return -2;
-	}
-
-	info.m_description = m_audioStreams[i].codec;
+	cXineLib *xineLib = cXineLib::getInstance();
+	info.m_description = _("audio track:");
 
 	if (info.m_language.empty())
 	{
-		info.m_language = m_audioStreams[i].language_code;
+		info.m_language = xineLib->getAudioLang(i);
 	}
 
 	return 0;
