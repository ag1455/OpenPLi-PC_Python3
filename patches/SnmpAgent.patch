diff -ruN a/plugin/cpu.py b/plugin/cpu.py
--- a/plugin/cpu.py	2020-06-22 20:22:58.000000000 +0300
+++ b/plugin/cpu.py	2023-09-22 16:31:16.382902764 +0300
@@ -1,5 +1,5 @@
 def enum(*sequential, **named):
-    enums = dict(zip(sequential, range(len(sequential))), **named)
+    enums = dict(list(zip(sequential, list(range(len(sequential))))), **named)
     return type('Enum', (), enums)
 
 CPUStatTypes = enum('user', 'nice', 'system', 'idle', 'iowait', 'irq', 'softirq', 'steal_time')
@@ -8,6 +8,6 @@
 def GetCPUStatForType(cputype):
 	try:
 		cpu_stat = open('/proc/stat', 'r').readline().strip().split()
-		return long(cpu_stat[cputype+1])
+		return int(cpu_stat[cputype+1])
 	except:
 		return 0
diff -ruN a/plugin/disk.py b/plugin/disk.py
--- a/plugin/disk.py	2020-06-22 20:22:58.000000000 +0300
+++ b/plugin/disk.py	2023-09-22 16:31:16.390902880 +0300
@@ -5,7 +5,7 @@
 _ntuple_diskusage = namedtuple('diskusage', 'total used free')
 
 def enum(*sequential, **named):
-    enums = dict(zip(sequential, range(len(sequential))), **named)
+    enums = dict(list(zip(sequential, list(range(len(sequential))))), **named)
     return type('Enum', (), enums)
 
 DiskInfoTypes = enum('totalmounts', 'mountpoint', 'filesystem', 'used', 'avail', 'total')
@@ -36,11 +36,11 @@
 			myusage = disk_usage(dfoutput[devindex + 1].split()[5])
 
 			if infotype == DiskInfoTypes.used:
-				return long(myusage.used) / 1000
+				return int(myusage.used) / 1000
 			elif infotype == DiskInfoTypes.avail:
-				return long(myusage.free) / 1000
+				return int(myusage.free) / 1000
 			elif infotype == DiskInfoTypes.total:
-				return long(myusage.total) / 1000
+				return int(myusage.total) / 1000
 		return 0
 	except:
 		return 0
diff -ruN a/plugin/__init__.py b/plugin/__init__.py
--- a/plugin/__init__.py	2020-06-22 20:22:58.000000000 +0300
+++ b/plugin/__init__.py	2023-09-22 16:31:16.358902418 +0300
@@ -1,5 +1,5 @@
 # -*- coding: utf-8 -*-
-from __future__ import print_function
+
 from Components.Language import language
 from Tools.Directories import resolveFilename, SCOPE_PLUGINS, SCOPE_LANGUAGE
 from os import environ as os_environ
diff -ruN a/plugin/loadavr.py b/plugin/loadavr.py
--- a/plugin/loadavr.py	2020-06-22 20:22:58.000000000 +0300
+++ b/plugin/loadavr.py	2023-09-22 16:31:16.402903054 +0300
@@ -1,5 +1,5 @@
 def enum(*sequential, **named):
-    enums = dict(zip(sequential, range(len(sequential))), **named)
+    enums = dict(list(zip(sequential, list(range(len(sequential))))), **named)
     return type('Enum', (), enums)
 
 CPULoadTypes = enum('one', 'five', 'fifteen')
diff -ruN a/plugin/locale/ru/LC_MESSAGES/SnmpAgent.po b/plugin/locale/ru/LC_MESSAGES/SnmpAgent.po
--- a/plugin/locale/ru/LC_MESSAGES/SnmpAgent.po	1970-01-01 03:00:00.000000000 +0300
+++ b/plugin/locale/ru/LC_MESSAGES/SnmpAgent.po	2023-09-22 16:03:27.345853337 +0300
@@ -0,0 +1,114 @@
+# SOME DESCRIPTIVE TITLE.
+# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
+# This file is distributed under the same license as the PACKAGE package.
+# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
+#
+msgid ""
+msgstr ""
+"Project-Id-Version: \n"
+"Report-Msgid-Bugs-To: \n"
+"POT-Creation-Date: 2012-09-02 10:15+0200\n"
+"PO-Revision-Date: 2017-12-14 15:04+0300\n"
+"Last-Translator: Alexandr Koltsov\n"
+"Language: ru\n"
+"MIME-Version: 1.0\n"
+"Content-Type: text/plain; charset=utf-8\n"
+"Content-Transfer-Encoding: 8bit\n"
+"Language-Team: http://forum.free-x.de\n"
+"X-Generator: Poedit 2.0.1\n"
+
+#: plugin.py:99
+msgid "Startup type"
+msgstr "Тип запуска"
+
+#: plugin.py:99
+msgid "Should the SnmpAgent start automatically on startup?"
+msgstr "Должен ли SnmpAgent запускаться автоматически при запуске?"
+
+#: plugin.py:100
+msgid "Manager IP"
+msgstr "Менеджер IP-адреса"
+
+#: plugin.py:100
+msgid "Which IP Address is used for the manager?"
+msgstr "Какой IP-адрес используется для менеджера?"
+
+#: plugin.py:101
+msgid "System Name"
+msgstr "Системное имя"
+
+#: plugin.py:101
+msgid "Which name should be used to identify the device?"
+msgstr "Какое имя следует использовать для идентификации устройства?"
+
+#: plugin.py:102
+msgid "System Description"
+msgstr "Описание системы"
+
+#: plugin.py:102
+msgid "Description for the device"
+msgstr "Описание устройства"
+
+#: plugin.py:103
+msgid "Support Address"
+msgstr "Адрес поддержки"
+
+#: plugin.py:103
+msgid "Support Email Address"
+msgstr "Адрес электронной почты поддержки"
+
+#: plugin.py:104
+msgid "Location"
+msgstr "Место нахождения"
+
+#: plugin.py:104
+msgid "Description of Location where the device resides"
+msgstr "Описание местоположения устройства"
+
+#: plugin.py:105
+msgid "Measure Bitrate"
+msgstr "Измерение битрейта"
+
+#: plugin.py:105
+msgid "Do bitrates have to be Monitored?"
+msgstr "Нужно ли отслеживать битрейты?"
+
+#: plugin.py:106
+msgid "Measure EMM"
+msgstr "Измерение EMM"
+
+#: plugin.py:106
+msgid "Do EMMs have to be Monitored?"
+msgstr "Следует ли отслеживать EMM?"
+
+#: plugin.py:116
+msgid "Cancel"
+msgstr "Отмена"
+
+#: plugin.py:117
+msgid "Save"
+msgstr "Сохранить"
+
+#: plugin.py:118
+msgid "Start Service"
+msgstr "Запустить"
+
+#: plugin.py:119
+msgid "Stop Service"
+msgstr "Остановить"
+
+#: plugin.py:141
+msgid "Service successfully started"
+msgstr "Служба успешно запущена"
+
+#: plugin.py:146
+msgid "Service successfully stoped"
+msgstr "Служба успешно остановлена"
+
+#: plugin.py:167
+msgid "Settings for SnmpAgent V{0}"
+msgstr "Настройки для SnmpAgent V{0}"
+
+#: plugin.py:1030
+msgid "SNMP Agent for Enigma2"
+msgstr "Агент SNMP для Enigma2"
diff -ruN a/plugin/memory.py b/plugin/memory.py
--- a/plugin/memory.py	2020-06-22 20:22:58.000000000 +0300
+++ b/plugin/memory.py	2023-09-22 16:31:16.414903226 +0300
@@ -1,5 +1,5 @@
 def enum(*sequential, **named):
-    enums = dict(zip(sequential, range(len(sequential))), **named)
+    enums = dict(list(zip(sequential, list(range(len(sequential))))), **named)
     return type('Enum', (), enums)
 
 MemoryTypes = enum('total', 'used', 'free', 'buffers', 'cached', 'swaptotal', 'swapfree')
@@ -29,19 +29,19 @@
 	try:
 		readMemValues()
 		if memorytype == MemoryTypes.total:
-			return long(memTotal)
+			return int(memTotal)
 		elif memorytype == MemoryTypes.used:
-			return long(memTotal)-long(memFree)
+			return int(memTotal)-int(memFree)
 		elif memorytype == MemoryTypes.free:
-			return long(memFree)
+			return int(memFree)
 		elif memorytype == MemoryTypes.buffers:
-			return long(memBuffers)
+			return int(memBuffers)
 		elif memorytype == MemoryTypes.cached:
-			return long(memCached)
+			return int(memCached)
 		elif memorytype == MemoryTypes.swaptotal:
-			return long(swapTotal)
+			return int(swapTotal)
 		elif memorytype == MemoryTypes.swapfree:
-			return long(swapFree)
+			return int(swapFree)
 		return 0
 	except:
 		return 0
diff -ruN a/plugin/network.py b/plugin/network.py
--- a/plugin/network.py	2020-06-22 20:22:58.000000000 +0300
+++ b/plugin/network.py	2023-09-22 16:31:16.434903515 +0300
@@ -2,7 +2,7 @@
 from collections import namedtuple
 
 def enum(*sequential, **named):
-    enums = dict(zip(sequential, range(len(sequential))), **named)
+    enums = dict(list(zip(sequential, list(range(len(sequential))))), **named)
     return type('Enum', (), enums)
 
 NetworkInfoTypes = enum('total', 'ipaddr', 'desc', 'alias', 'type', 'mtu', 'speed', 'hspeed', 'hwaddr', 'status', 'inoctants', 'indiscard', 'inerrors', 'outoctacts', 'outdiscard', 'outerrors')
@@ -47,17 +47,17 @@
 
 		data = anameres[1].split()
 		if infotype == NetworkInfoTypes.inoctants:
-			return long(data[0])
+			return int(data[0])
 		if infotype == NetworkInfoTypes.inerrors:
-			return long(data[2])
+			return int(data[2])
 		if infotype == NetworkInfoTypes.indiscard:
-			return long(data[3])
+			return int(data[3])
 		if infotype == NetworkInfoTypes.outoctacts:
-			return long(data[8])
+			return int(data[8])
 		if infotype == NetworkInfoTypes.outerrors:
-			return long(data[10])
+			return int(data[10])
 		if infotype == NetworkInfoTypes.outdiscard:
-			return long(data[11])
+			return int(data[11])
 
 		if infotype == NetworkInfoTypes.type:
 			type = int(open('/sys/class/net/%s/type' % if_name, 'r').readline())
diff -ruN a/plugin/plugin.py b/plugin/plugin.py
--- a/plugin/plugin.py	2020-06-22 20:22:58.000000000 +0300
+++ b/plugin/plugin.py	2023-09-22 16:31:16.698907323 +0300
@@ -1,5 +1,5 @@
-from __future__ import absolute_import
-from __future__ import print_function
+
+
 from Components.ActionMap import ActionMap
 from Components.config import config, getConfigListEntry, ConfigSubsection, ConfigSelection, ConfigEnableDisable
 from Components.config import ConfigInteger, ConfigSubList, ConfigSubDict, ConfigText
diff -ruN a/setup_translate.py b/setup_translate.py
--- a/setup_translate.py	2020-06-22 20:22:58.000000000 +0300
+++ b/setup_translate.py	2023-09-22 16:31:16.346902245 +0300
@@ -1,4 +1,4 @@
-from __future__ import print_function
+
 # Language extension for distutils Python scripts. Based on this concept:
 # http://wiki.maemo.org/Internationalize_a_Python_application
 from distutils import cmd
@@ -24,7 +24,7 @@
 						dest = os.path.join(lc, f[:-2] + 'mo')
 						print("Language compile %s -> %s" % (src, dest))
 						if os.system("msgfmt '%s' -o '%s'" % (src, dest)) != 0:
-							raise (Exception, "Failed to compile: " + src)
+							raise Exception
 
 class build(_build):
 	sub_commands = _build.sub_commands + [('build_trans', None)]
